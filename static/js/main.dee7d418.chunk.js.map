{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["Feedback","options","onLeaveFeedback","className","map","option","value","type","onClick","FeedbackOptions","good","neutral","bad","total","positiveFeedback","defaultProps","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","state","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAGe,SAASA,EAAT,GAAiD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC1C,OACE,oBAAIC,UAAU,cAAd,SACGF,EAAQG,KAAI,SAAAC,GACX,OACE,oBAAIF,UAAU,aAAd,SACE,wBACEA,UAAU,SACVG,MAAOD,EACPE,KAAK,SACLC,QAAS,kBAAMN,EAAgBG,IAJjC,SAMGA,KAP2BA,QCN3B,SAASI,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,iBAEA,OACE,qBAAIX,UAAU,aAAd,UACE,wCAAWO,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,UDcNd,EAASe,aAAe,CACtBd,QAAS,CAAC,OAAQ,UAAW,Q,ME3BhB,SAASe,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,0BAASf,UAAU,UAAnB,UACE,oBAAIA,UAAU,QAAd,SAAuBc,IACtBC,K,MCJQ,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,mBAAGjB,UAAU,eAAb,SAA6BiB,ICyDvBC,MAvDf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOZ,EAAP,KAAaa,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOX,EAAP,KAAgBa,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOV,EAAP,KAAYa,EAAZ,KAkBMC,EAAqBhB,EAAOC,EAAUC,EAEtCe,EAAkCC,KAAKC,MAC1CnB,EAAOgB,EAAsB,KAKhC,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CAAST,MAAM,wBAAf,SACE,cAACjB,EAAD,CACEC,QANa,CAAC,OAAQ,UAAW,OAOjCC,gBA7BgB,SAAAG,GACtB,OAAQA,GACN,IAAK,OACHkB,GAAQ,SAAAO,GAAK,OAAIA,EAAQ,KACzB,MACF,IAAK,UACHN,GAAW,SAAAM,GAAK,OAAIA,EAAQ,KAC5B,MACF,IAAK,MACHL,GAAO,SAAAK,GAAK,OAAIA,EAAQ,KACxB,MACF,QACE,aAqBF,cAAC,EAAD,CAASb,MAAM,aAAf,SACGS,EACC,cAAC,EAAD,CACEhB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOa,EACPZ,iBAAkBa,IAGpB,cAAC,EAAD,CAAcP,QAAQ,4BCjDhCW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.dee7d418.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport './FeedbackOptions.css';\n\nexport default function Feedback({ options, onLeaveFeedback }) {\n  return (\n    <ul className=\"buttonsList\">\n      {options.map(option => {\n        return (\n          <li className=\"buttonItem\" key={option}>\n            <button\n              className=\"button\"\n              value={option}\n              type=\"button\"\n              onClick={() => onLeaveFeedback(option)}\n            >\n              {option}\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nFeedback.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nFeedback.defaultProps = {\n  options: ['good', 'neutral', 'bad'],\n};\n","import PropTypes from 'prop-types';\n\nexport default function FeedbackOptions({\n  good,\n  neutral,\n  bad,\n  total,\n  positiveFeedback,\n}) {\n  return (\n    <ul className=\"statistics\">\n      <li>Good: {good}</li>\n      <li>Neutral: {neutral}</li>\n      <li>Bad: {bad}</li>\n      <li>Total: {total}</li>\n      <li>Positive feedback: {positiveFeedback}%</li>\n    </ul>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positiveFeedback: PropTypes.number,\n};\n","import PropTypes from 'prop-types';\nimport './Section.css';\n\nexport default function Section({ title, children }) {\n  return (\n    <section className=\"section\">\n      <h1 className=\"title\">{title}</h1>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.object,\n};\n","import PropTypes from 'prop-types';\nimport './Notification.css';\n\nexport default function Notification({ message }) {\n  return <p className=\"notification\">{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import { useState, Fragment } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(state => state + 1);\n        break;\n      case 'neutral':\n        setNeutral(state => state + 1);\n        break;\n      case 'bad':\n        setBad(state => state + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = Math.round(\n    (good / countTotalFeedback) * 100,\n  );\n\n  const buttonsNames = ['good', 'neutral', 'bad'];\n\n  return (\n    <Fragment>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={buttonsNames}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </Section>\n\n      <Section title=\"Statistics\">\n        {countTotalFeedback ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback}\n            positiveFeedback={countPositiveFeedbackPercentage}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}